@using System
@using System.Text
@using System.Data.SqlClient
@inherits Satrabel.OpenContent.Components.OpenContentWebPage

@{

    
    RegisterScript ("js/accordion.js");

    var intPortalId = Dnn.Portal.PortalId;
    var strPortalAlias = Dnn.Portal.PortalAlias;

    string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["SiteSqlServer"].ConnectionString;
    string txtSql = @"SELECT Tabs.TabID, 
        Tabs.PortalID, 
        Tabs.TabName,
        Tabs.TabId,
        Tabs.TabPath as Path,
        Modules.ModuleID,
        ModuleDefinitions.FriendlyName, 
        ModuleSettings.SettingName, 
        ModuleSettings.SettingValue as Template
    FROM ModuleDefinitions
    INNER JOIN Modules ON ModuleDefinitions.ModuleDefID = Modules.ModuleDefID
    INNER JOIN TabModules ON Modules.ModuleID = TabModules.ModuleID
    INNER JOIN Tabs ON TabModules.TabID = Tabs.TabID
    INNER JOIN ModuleSettings ON Modules.ModuleID = ModuleSettings.ModuleID
    WHERE ModuleDefinitions.FriendlyName = 'OpenContent' AND ModuleSettings.SettingName = 'template' {0}
    ORDER BY ModuleSettings.SettingValue, Tabs.PortalID";

    var portalFilter = "";

    if (Model.Settings != null && Model.Settings.ThisPortal)
    {
        portalFilter = " AND Tabs.PortalID = @PortalId";
    }

    txtSql = string.Format(txtSql, portalFilter);

    var rows = new List<dynamic>();

    using (var connection = new SqlConnection(connectionString))
    {
        connection.Open();
        using (var command = new SqlCommand(txtSql, connection))
        {
            if (!string.IsNullOrEmpty(portalFilter))
            {
                command.Parameters.AddWithValue("@PortalId", intPortalId);
            }

            using (var reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    rows.Add(new
                    {
                        TabID = reader["TabID"],
                        PortalID = reader["PortalID"],
                        TabName = reader["TabName"],
                        Path = reader["Path"],
                        ModuleID = reader["ModuleID"],
                        Template = reader["Template"]
                    });
                }
            }
        }
    }

    var tableBuilder = new StringBuilder();
    string lastTemplate = "";
    int tables = 0;

    foreach (var row in rows)
    {
        string template = row.Template.ToString();

        if (Model.Settings != null && Model.Settings.ShortPath != null && Model.Settings.ShortPath)
        {
            string[] items = template.Split(new char[] { '/' }, StringSplitOptions.RemoveEmptyEntries);
            template = string.Join("/", items.Skip(4));
        }

        // Close the previous wrapper and start a new one if the template changes
        if (lastTemplate != template)
        {
            if (tables > 0)
            {
                tableBuilder.Append("</table></div></div>"); // Close the previous table and wrapper
            }

            // Start a new wrapper
            tableBuilder.Append(string.Format(
                "<div class='oc-template-wrapper'>" + // Wrapper starts here
                "<header class='oc-template-header'>" +
                "<div class='oc-template-title'>" +
                "<h5 class='oc-title'>Template:<span class='oc-template-name'>{0}</span></h5>" +
                "</div>" +
                "<div class='buttons'>" +
                "<span class='btn oc-accordion-trigger oc-open' data-selector='#content-{1}' id='section-{1}'>" +
                "<span class='oc-show-text'>Show </span>" +
                "<span class='oc-hide-text'>Hide </span>" +
                "Pages" +
                "</span>" +
                "</div>" +
                "</header>" +
                "<div class='oc-accordion-content oc-open' id='content-{1}'>" +
                "<table>" +
                "<tr>" +
                "<th class='col-portal'>PortalId</th>" +
                "<th class='col-page'>Page Name</th>" +
                "<th class='col-path'>Path</th>" +
                "</tr>",
                template, tables));
            tables++;
        }

        // Add a row to the current table
        tableBuilder.Append(string.Format(
            "<tr>" +
            "<td>{0}</td>" +
            "<td><a href='/default.aspx?tabid={1}#{2}' target='_blank'>{3}</a> &raquo;</td>" +
            "<td>{4}</td>" +
            "</tr>",
            row.PortalID,
            row.TabID,
            row.ModuleID,
            row.TabName,
            row.Path.ToString().Replace("//", "/")));

        lastTemplate = template;
    }

    // Close the last wrapper
    if (tables > 0)
    {
        tableBuilder.Append("</table></div>"); // Close the last table and wrapper
    }
}

<div class="oc-template-list">
    <div class="buttons">
        <a class="btn" id="oc-open-all">Show All</a>
        <a class="btn" id="oc-close-all">Hide All</a>
    </div>
    @Html.Raw(tableBuilder.ToString())
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    initAccordion();
  });
</script>